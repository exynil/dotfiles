set hidden true
set ignorecase true
set number true
set info size
set preview true
set previewer ~/.config/lf/preview

cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) vim "$f";;
        video/*) mpv "$f";;
        audio/*) ffplay -nodisp -autoexit "$f";;
        image/*) sxiv "$f";;
        *) xdg-open "$f";;
    esac
}}

cmd mkdir ${{
    printf "Directory Name: "
    read ans
    mkdir $ans
}}

cmd sudo_mkdir ${{
    printf "Directory Name: "
    read ans
    sudo mkdir $ans
}}

cmd mkfile ${{
    printf "File Name: "
    read ans
    $EDITOR $ans
}}

cmd sudo_mkfile ${{
    printf "File Name: "
    read ans
    sudo $EDITOR $ans
}}

cmd chmod ${{
    printf "Mode Bits: "
    read ans

    for file in "$fx"
    do
        chmod $ans $file
    done

    lf -remote 'send reload'
}}

cmd chown ${{
    sudo chown -R $USER:$USER $fx
}}

cmd sudo_trash_put ${{
    sudo trash-put $fx
}}

cmd zip %{{ zip -r "$f.zip" "$(basename $f)" }}
cmd tar %tar cvf "$f.tar" "$(basename $f)"
cmd targz %tar cvzf "$f.tar.gz" "$(basename $f)"
cmd tarbz2 %tar cjvf "$f.tar.bz2"  "$(basename $f)"

# Archive bindings
cmd unarchive ${{
    case "$f" in
        *.zip) unzip "$f" ;;
        *.tar.gz) tar -xzvf "$f" ;;
        *.tar.bz2) tar -xjvf "$f" ;;
        *.tar) tar -xvf "$f" ;;
        *) echo "Unsupported format" ;;
    esac
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
    if [ -f "$res" ]; then
        cmd="select"
    elif [ -d "$res" ]; then
        cmd="cd"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd broot_jump ${{
    f=$(mktemp)
    res="$(broot -h --outcmd $f && cat $f | sed 's/cd //')"
    rm -f "$f"
    if [ -f "$res" ]; then
        cmd="select"
    elif [ -d "$res" ]; then
        cmd="cd"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd trash_put %{{ 
    files=$(printf "$fx" | tr '\n' ';')
    while [ "$files" ]; do
        # extract the substring from start of string up to delimiter.
        # this is the first "element" of the string.
        file=${files%%;*}

        trash-put "$(basename "$file")"
        # if there's only one element left, set `files` to an empty string.
        # this causes us to exit this `while` loop.
        # else, we delete the first "element" of the string from files, and move onto the next.
        if [ "$files" = "$file" ]; then
            files=''
        else
            files="${files#*;}"
        fi
    done
}}

map m
map y
map d
map q
map p
map c
map t
map a
map f
map e

map ee ${{ "$f" }}

map . set hidden!

map ff fzf_jump
map fb broot_jump

map gd cd /media/hdd
map guv cd /media/hdd/max/videos
map gup cd /media/hdd/max/pictures
map gud cd /media/hdd/max/downloads
map gx cd /etc/X11/xorg.conf.d


map yy copy
map yr clear

map pp paste

map dd cut

map tp trash_put
map te %{{ trash-empty }}
map tr ${{ trash-restore }}
map tx delete
map tsp sudo_trash_put

map md mkdir
map msd sudomkdir
map mf mkfile
map msf sudomkfile
map cm chmod
map co chown

# Archive Mappings
map az zip
map at tar
map ag targz
map ab tarbz2
map au unarchive

map qq quit

map <enter> open
map <delete> trash_put



